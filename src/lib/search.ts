import { radicalSearchPatterns, type RadicalType } from '@/data/kanji';
import { generatedKanji } from '@/data/generated-kanji';
import { radicalInfo } from '@/data/kanji';
import { extractKanjiFromHannyashingyo } from '@/data/hannyashingyo';
import type { Kanji } from '@/types/kanji';

// Ê§úÁ¥¢„Çø„Ç§„Éó„ÅÆÂÆöÁæ©
export type SearchType = 'radical' | 'hannyashingyo';

// ÈÉ®È¶ñ„Å´„Çà„ÇãÊº¢Â≠óÊ§úÁ¥¢ÔºàÊó¢Â≠òÊ©üËÉΩÔºâ
export function searchByRadical(radical: RadicalType): Kanji[] {
  console.log(`üîç Searching for radical: ${radical}`);

  const patterns = radicalSearchPatterns[radical];
  if (!patterns) {
    console.warn(`‚ö†Ô∏è No patterns found for radical: ${radical}`);
    return [];
  }

  const radicalConfig = radicalInfo.find(info => info.id === radical);
  const excludeComponents = radicalConfig?.excludeComponents || [];
  const excludeCharacter = radicalConfig?.excludeCharacter || [];

  const results = generatedKanji.filter(kanji => {
    // Èô§Â§ñÊñáÂ≠ó„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    if (excludeCharacter.includes(kanji.character)) {
      return false;
    }

    // Èô§Â§ñÈÉ®ÂìÅ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    if (excludeComponents.some(component => kanji.radicals.includes(component))) {
      return false;
    }

    // „Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„É≥„Ç∞
    return patterns.some(pattern =>
      kanji.radicals.includes(pattern)
    );
  });

  console.log(`üìä Found ${results.length} characters for radical: ${radical}`);
  return results;
}

// Ëà¨Ëã•ÂøÉÁµå„Å´„Çà„ÇãÊº¢Â≠óÊ§úÁ¥¢ÔºàÊñ∞Ê©üËÉΩÔºâ
export function searchByHannyashingyo(): Kanji[] {
  console.log('üîç Searching for Hannyashingyo characters');

  const hannyashingyoKanji = extractKanjiFromHannyashingyo(); // ÈáçË§á„ÇÇÂê´„ÇÄ

  const results: Kanji[] = [];
  const missingKanji: string[] = [];

  // Ëà¨Ëã•ÂøÉÁµå„ÅÆÂá∫ÁèæÈ†Ü„Å´Âæì„ÅÑ„ÄÅÈáçË§á„ÇÇÂê´„ÇÅ„Å¶ÁµêÊûú„Çí‰ΩúÊàê
  for (const kanjiChar of hannyashingyoKanji) {
    const foundKanji = generatedKanji.find(kanji => kanji.character === kanjiChar);
    if (foundKanji) {
      results.push(foundKanji);
    } else {
      // KanjiVG„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÊº¢Â≠ó„ÅÆ„ÉÄ„Éü„Éº„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê
      const dummyKanji: Kanji = {
        character: kanjiChar,
        unicode: kanjiChar.codePointAt(0)?.toString(16).padStart(4, '0').toUpperCase() || '0000',
        strokeCount: 1, // „Éá„Éï„Ç©„É´„ÉàÂÄ§
        strokes: [], // Á©∫„ÅÆÈÖçÂàó
        radicals: [], // Á©∫„ÅÆÈÖçÂàó
        viewBox: '0 0 109 109', // Ê®ôÊ∫ñÁöÑ„Å™viewBox
        source: 'kanjivg'
      };
      results.push(dummyKanji);
      missingKanji.push(kanjiChar);
    }
  }

  console.log(`üìä Found ${results.length} characters for Hannyashingyo (including duplicates)`);
  if (missingKanji.length > 0) {
    console.log(`‚ö†Ô∏è Missing from KanjiVG database: ${missingKanji.join(', ')}`);
  }
  return results;
}

// Áµ±ÂêàÊ§úÁ¥¢Èñ¢Êï∞
export function searchKanji(type: SearchType, query?: RadicalType): Kanji[] {
  switch (type) {
    case 'radical':
      if (!query) {
        console.warn('‚ö†Ô∏è Radical search requires a query parameter');
        return [];
      }
      return searchByRadical(query);
    case 'hannyashingyo':
      return searchByHannyashingyo();
    default:
      console.warn(`‚ö†Ô∏è Unknown search type: ${type}`);
      return [];
  }
}
